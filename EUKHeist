configfile: "hierarchy_cluster.yaml"

import io 
import os
import pandas as pd
import numpy as np
import pathlib
from snakemake.exceptions import print_exception, WorkflowError

sys.path.insert(1, 'scripts')
pd.options.display.max_colwidth = 100

import setupworkspace

#----DEFINE RULES----#

localrules: multiqc, copy_bwa_index 
include: "rules/qc-snake"

rule all: 
    input:
        # QC DATA
        fastqcZIP_rawG = expand("{base}/qc/fastqc/{study}/{sample}_{num}_fastqc.zip", base = OUTPUTDIR, 
                                study = METAG_FOLDER, sample=metaG_run_accession, num = [1,2]),
        fastqcZIP_rawT = expand("{base}/qc/fastqc/{study}/{sample}_{num}_fastqc.zip", base = OUTPUTDIR, 
                                study = METAT_FOLDER, sample=metaT_run_accession, num = [1,2]),  
        fastqcZIP_trimmedG = expand("{base}/qc/fastqc/{study}/{sample}_{num}.trimmed_fastqc.zip", base = OUTPUTDIR, 
                                    study = METAG_FOLDER, sample=metaG_run_accession, num = [1,2]),  
        fastqcZIP_trimmedT = expand("{base}/qc/fastqc/{study}/{sample}_{num}.trimmed_fastqc.zip", base = OUTPUTDIR, 
                                    study = METAT_FOLDER, sample=metaT_run_accession, num = [1,2]),  
        #MULTIQC
        html_rawG = OUTPUTDIR + "/qc/rawG_multiqc.html",
        stats_rawG = OUTPUTDIR + "/qc/rawG_multiqc_general_stats.txt",
        html_trimmedG = OUTPUTDIR + "/qc/trimmedG_multiqc.html",
        stats_trimmedG = OUTPUTDIR + "/qc/trimmedG_multiqc_general_stats.txt",
        html_rawT = OUTPUTDIR + "/qc/rawT_multiqc.html",
        stats_rawT = OUTPUTDIR + "/qc/rawT_multiqc_general_stats.txt",
        html_trimmedT = OUTPUTDIR + "/qc/trimmedT_multiqc.html",
        stats_trimmedT = OUTPUTDIR + "/qc/trimmedT_multiqc_general_stats.txt",
        #TRIM DATA
        trimmedDataG = expand("{base}/trimmed/{study}/{sample}_{num}.trimmed.fastq.gz", base = SCRATCHDIR, 
                              study = METAG_FOLDER, sample=metaG_run_accession, num = [1,2]), 
        trimmedDataT = expand("{base}/trimmed/{study}/{sample}_{num}.trimmed.fastq.gz", base = SCRATCHDIR, 
                              study = METAT_FOLDER, sample=metaT_run_accession, num = [1,2]), 

        #CALCULATE SOURMASH
        signatureG = expand("{base}/sourmash/{study}/{sample}.10k.sig", base = SCRATCHDIR, 
                            study = METAG_FOLDER, sample = metaG_run_accession),
        signatureT = expand("{base}/sourmash/{study}/{sample}.10k.sig", base = SCRATCHDIR, 
                            study = METAT_FOLDER, sample = metaT_run_accession),

        #ASSEMBLE
        assembly = expand("{base}/megahit/{assembly_group}/final.contigs.fa", base = OUTPUTDIR, 
                          assembly_group = METAG_ASSEMBLYGROUP),  
        assembly_copy = expand("{base}/bwa_index/{assembly_group}.fa", base = SCRATCHDIR, assembly_group = METAG_ASSEMBLYGROUP),  

        #BWA INDEX
        bwa_index = expand("{base}/bwa_index/{assembly_group}.fa.{bwa_tail}", base = SCRATCHDIR, 
                           assembly_group = METAG_ASSEMBLYGROUP, bwa_tail = ["amb", "ann", "bwt", "pac", "sa"]), 

        #BWA MAPPING:
        bwa_memG = get_sample_list(METAG_ASSEMBLYGROUP, METAG_SAMPLELIST, METAG_FOLDER), 
        bwa_memT = get_sample_list(METAT_ASSEMBLYGROUP, METAT_SAMPLELIST, METAT_FOLDER), 

        #BINNING 

        #METABAT2 
        jgi_abund = expand("{base}/metabat2/{assembly_group}/jgi_abund.txt", base = OUTPUTDIR, 
                           assembly_group = METAG_ASSEMBLYGROUP),
        metabat2_bins = expand("{base}/metabat2/{assembly_group}/{assembly_group}_bin", base = OUTPUTDIR, 
                               assembly_group = METAG_ASSEMBLYGROUP),
        #EUKREP
        eukrep =  expand("{base}/eukrep/{assembly_group}/euk.final.contigs.fa", base = OUTPUTDIR, 
                         assembly_group = METAG_ASSEMBLYGROUP), 
        metabat2_bins_euk = expand("{base}/metabat2_euk/{assembly_group}/{assembly_group}_eukbin", 
                                   base = OUTPUTDIR, assembly_group = METAG_ASSEMBLYGROUP),
        
        #PROTEIN PREDICITION
        #PRODIGAL
        proteins = expand("{base}/prodigal/{assembly_group}/proteins.faa", base = OUTPUTDIR, 
                          assembly_group = METAG_ASSEMBLYGROUP), 


rule compute_sigs:
    input:
        r1 = SCRATCHDIR + "/trimmed/{study}/{sample}_1.trimmed.fastq.gz",
        r2 = SCRATCHDIR + "/trimmed/{study}/{sample}_2.trimmed.fastq.gz" 
    output: 
        SCRATCHDIR + "/sourmash/{study}/{sample}.10k.sig"
    conda: 
        "envs/sourmash.yaml"
    log:
         OUTPUTDIR +  "/logs/sourmash/{study}/sourmash_{sample}.log"
    shell: 
        """
        zcat {input.r1} {input.r2} | sourmash compute -k 21,31,51\
            --scaled 10000  --track-abundance \
            -o {output} - 2> {log}
        """

rule megahit_assembly: 
    input: r1 = lambda wildcards: identify_read_groups("{assembly_group}".
                                                       format(assembly_group=wildcards.assembly_group), METAG_FOLDER), 
           r2 = lambda wildcards: identify_read_groups("{assembly_group}".
                                                       format(assembly_group=wildcards.assembly_group), METAG_FOLDER, 
                                                       FORWARD=False) 
    output: 
       OUTPUTDIR + "/megahit/{assembly_group}/final.contigs.fa"  
    conda: 
        "envs/megahit.yaml"
    log: 
        OUTPUTDIR + "/logs/megahit/{assembly_group}.log" 
    params: 
        inputr1 = lambda wildcards, input: ','.join(input.r1),
        inputr2 = lambda wildcards, input: ','.join(input.r2),
        min_contig_len = MEGAHIT_MIN_CONTIG,
        cpu_threads = MEGAHIT_CPU, 
        memory = MEGAHIT_MEM, 
        other_options = MEGAHIT_OTHER,
        megahit_output_name = lambda wildcards: "{}/megahit/{}".format(OUTPUTDIR, wildcards.assembly_group),
        megahit_output_prefix = lambda wildcards: "{}".format(wildcards.assembly_group),
    shell: 
        """
        megahit -1 {params.inputr1} -2 {params.inputr2} --min-contig-len {params.min_contig_len} --memory {params.memory} -t {params.cpu_threads} --out-dir {params.megahit_output_name} {params.other_options}  >> {log} 2>&1
        """

rule eukrep:
    input: 
        assembly = OUTPUTDIR + "/megahit/{assembly_group}/final.contigs.fa",
    output:
        OUTPUTDIR + "/eukrep/{assembly_group}/euk.final.contigs.fa"
    conda: 
        "envs/EukRep.yaml"
    log:
        OUTPUTDIR + "/logs/eukrep/{assembly_group}.eukrep.log"
    params: 
        prok = OUTPUTDIR + "/eukrep/{assembly_group}/prok.final.contigs.fa",
        min_contig = 1000
    shell: 
        """
        EukRep -i {input} -o {output} --prokarya {params.prok} --min {params.min_contig} > {log} 2>&1
        """

rule prodigal:
    input:
        assembly = OUTPUTDIR + "/megahit/{assembly_group}/final.contigs.fa",
    output: 
        proteins = OUTPUTDIR + "/prodigal/{assembly_group}/proteins.faa",
        genes = OUTPUTDIR + "/prodigal/{assembly_group}/genes.gff"
    conda:
        "envs/prodigal.yaml"
    shell:
        """
        prodigal -i {input.assembly} -f gff -o {output.genes} -a {output.proteins} -p meta
        """
